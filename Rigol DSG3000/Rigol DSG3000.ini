# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: Rigol DSG3000

# The version string should be updated whenever changes are made to this config file
version: 1.0

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: Rigol DSG3000



[Model and options]
# The option section allow instruments with different options to use the same driver

# List of models supported by this driver
model_str_1:  Rigol Technologies,DSG30

# Check instrument model id at startup (True or False). Default is False
check_model: True


# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: False

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 2

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication. 
query_instr_errors: False 

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd: :SYST:ERR?

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
init:

# Final commands sent to the instrument when closing the driver
final: 


# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   model_value_1: Value of "model" for which the control is visible
#   model_value_2: Value of "model" for which the control is visible
#   ...
#   option_value_1: Value of "installed option" for which the control is visible
#   option_value_2: Value of "installed option" for which the control is visible
#   ...
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.


[Level]
unit: dBm
datatype: DOUBLE
set_cmd: :LEV

[Frequency]
unit: Hz
datatype: DOUBLE
set_cmd: :FREQ

[Phase]
unit: deg
datatype: DOUBLE
set_cmd: :PHAS

[Output]
datatype: BOOLEAN
set_cmd: :OUTP

[Modulation]
datatype: BOOLEAN
set_cmd: :MOD:STAT

[Pulse modulation]
datatype: BOOLEAN
set_cmd: :PULM:STAT
group: Pulse modulation 
section: Modulation

[Pulse polarity]
datatype: COMBO
combo_def_1: Normal
combo_def_2: Inverse
cmd_def_1: NORMAL
cmd_def_2: INVERSE
group: Pulse modulation 
set_cmd: :PULM:POL
section: Modulation

[Pulse modulation source]
datatype: COMBO
combo_def_1: Internal
combo_def_2: External
cmd_def_1: INT
cmd_def_2: EXT
group: Pulse modulation 
set_cmd: :PULM:SOUR
section: Modulation

[Pulse width]
unit: s
datatype: DOUBLE
set_cmd: :PULM:WIDT
state_quant: Pulse modulation source
state_value_1: Internal
group: Pulse modulation 
section: Modulation

[Pulse period]
unit: s
datatype: DOUBLE
high_lim: 170
set_cmd: :PULM:PER
state_quant: Pulse modulation source
state_value_1: Internal
group: Pulse modulation 
section: Modulation

[AM - Enabled]
datatype: BOOLEAN
set_cmd: :AM:STAT
group: Amplitude modulation
section: Modulation

[AM - Depth]
datatype: DOUBLE
low_lim: 0
high_lim: 100
set_cmd: :AM:DEPT
state_quant: AM - Enabled
state_value_1: 1
group: Amplitude modulation
section: Modulation

[AM - Source]
datatype: COMBO
combo_def_1: Internal
combo_def_2: External
combo_def_3: Internal,External
cmd_def_1: INT
cmd_def_2: EXT
cmd_def_3: INT,EXT
set_cmd: :AM:SOUR
state_quant: AM - Enabled
state_value_1: 1
group: Amplitude modulation
section: Modulation

[AM - Frequency]
datatype: DOUBLE
unit: Hz
set_cmd: :AM:FREQ
state_quant: AM - Source
state_value_1: Internal
group: Amplitude modulation
section: Modulation

[FM - Enabled]
datatype: BOOLEAN
set_cmd: :FM:STAT
group: Frequency modulation
section: Modulation

[FM - Deviation]
datatype: DOUBLE
unit: Hz
set_cmd: :FM:DEV
state_quant: FM - Enabled
state_value_1: 1
group: Frequency modulation
section: Modulation

[FM - Source]
datatype: COMBO
combo_def_1: Internal
combo_def_2: External
combo_def_3: Internal,External
cmd_def_1: INT
cmd_def_2: EXT
cmd_def_3: INT,EXT
set_cmd: :FM:SOUR
state_quant: FM - Enabled
state_value_1: 1
group: Frequency modulation
section: Modulation

[FM - Waveform]
datatype: COMBO
combo_def_1: Sine
combo_def_2: Square
cmd_def_1: SINE
cmd_def_2: SQUA
set_cmd: :FM:WAVE
state_quant: FM - Source
state_value_1: Internal
group: Frequency modulation
section: Modulation

[FM - Frequency]
datatype: DOUBLE
unit: Hz
set_cmd: :FM:FREQ
state_quant: FM - Source
state_value_1: Internal
group: Frequency modulation
section: Modulation

[PM - Enabled]
datatype: BOOLEAN
set_cmd: :PM:STAT
group: Phase modulation
section: Modulation

[PM - Deviation]
datatype: DOUBLE
unit: rad
set_cmd: :PM:DEV
state_quant: PM - Enabled
state_value_1: 1
group: Phase modulation
section: Modulation

[PM - Source]
datatype: COMBO
combo_def_1: Internal
combo_def_2: External
combo_def_3: Internal,External
cmd_def_1: INT
cmd_def_2: EXT
cmd_def_3: INT,EXT
set_cmd: :PM:SOUR
state_quant: PM - Enabled
state_value_1: 1
group: Phase modulation
section: Modulation

[PM - Waveform]
datatype: COMBO
combo_def_1: Sine
combo_def_2: Square
cmd_def_1: SINE
cmd_def_2: SQUA
set_cmd: :PM:WAVE
state_quant: PM - Source
state_value_1: Internal
group: Phase modulation
section: Modulation

[PM - Frequency]
datatype: DOUBLE
unit: Hz
set_cmd: :PM:FREQ
state_quant: PM - Source
state_value_1: Internal
group: Phase modulation
section: Modulation

[LF output]
datatype: BOOLEAN
set_cmd: :LFO:STAT
group: Low-frequency output
section: Low-frequency output

[LF shape]
datatype: COMBO
combo_def_1: Sine
combo_def_2: Swp-Sine
combo_def_3: Triangle
combo_def_4: Square
combo_def_5: Ramp
cmd_def_1: SINE
cmd_def_2: SWEP
cmd_def_3: TRI
cmd_def_4: SQU
cmd_def_5: RAMP
set_cmd: :LFO:SHAP
group: Low-frequency output
section: Low-frequency output

[LF frequency]
unit: Hz
datatype: DOUBLE
set_cmd: :LFO:FREQ
group: Low-frequency output
section: Low-frequency output

[LF level]
unit: V
datatype: DOUBLE
set_cmd: :LFO:LEV
group: Low-frequency output
section: Low-frequency output

